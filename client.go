package rls

import (
	"context"
	"fmt"
	"net/http"
	"time"
)

// Client is the interface of a RLS API Client
type Client interface {
	// Ping does ping pong with the API server at /
	Ping() bool
	// GetAccount returns the account's balances
	GetAccount() (*Account, error)
	// NewWithdrawal initiates a withdrawal from RLS API by paying a specific invoice
	NewWithdrawal(withdrawal *Withdrawal) (*Withdrawal, error)
	// GetWithdrawal returns a withdrawal based on the passed withdrawal_id
	GetWithdrawal(withdrawalID string) (*Withdrawal, error)
	// NewInvoice creates an invoice to enable deposits to RLS
	NewInvoice(amount int64, label string, network string) (*Invoice, error)
	// GetInvoices queries a list of invoices generated by RLS
	GetInvoices(limit int64, nextTimestamp int64) (*InvoiceList, error)
	// GetDeposit returns a single deposit based on its depositID
	GetDeposit(depositID string) (*Deposit, error)
	// GetDeposits returns a list of deposits (settled invoices) to RLS
	GetDeposits(limit int64, nextTimestamp int64) (*DepositList, error)
	// SubscribeToWebhook subscribes to a webhook
	SubscribeToWebhook(callbackURL string) (*Webhook, error)
	// GetSubscribedWebhook queries subscribed webhook
	GetSubscribedWebhook() (*Webhook, error)
	// DeleteWebhook deletes the existing webhook
	DeleteWebhook() error
	// DecodeInvoice decodes a Lightning Invoice using RLS using `lncli decodepayreq`
	DecodeInvoice(invoice string) (*DecodedInvoice, error)
	// EstimateLightningFee estimates Lightning Fee of an invoice using `lncli`
	EstimateLightningFee(invoice string, amount int64) (*FeeEstimate, error)
}

// RLSClient is the client for the RLS API
// RLSClient implements Client
type RLSClient struct {
	Ctx        context.Context
	cfg        Config
	HTTPClient *http.Client
}

// BaseURL returns the base url used by this RLS client
func (rls *RLSClient) BaseURL() string {
	return rls.cfg.BaseURL
}

// AccountID returns the base url used by this RLS client
func (rls *RLSClient) AccountID() string {
	return rls.cfg.AccountID
}

func (rls *RLSClient) Credential() string {
	return rls.cfg.credential
}

// NewRLSClient creates a new RLSClient
func NewRLSClient(ctx context.Context, cfg Config) *RLSClient {
	return &RLSClient{
		Ctx: ctx,
		cfg: cfg,
		HTTPClient: &http.Client{
			Timeout: time.Minute,
		},
	}
}

// Ping does ping pong with the API server at /
func (rls *RLSClient) Ping() bool {
	req, err := http.NewRequest(http.MethodGet, fmt.Sprintf("%s/", rls.BaseURL()), nil)
	if err != nil {
		return false
	}
	// empty body response
	err = rls.sendRequest(req, nil)
	return err == nil
}
